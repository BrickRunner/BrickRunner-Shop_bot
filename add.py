import asyncio
import logging
import os
import pytz
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime
from aiogram.utils.markdown import hbold
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
GROUP_ID = int(os.getenv("GROUP_ID"))


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
db = Database()
router = Router()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class DeleteProductState(StatesGroup):
    waiting_product_choice = State()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
class OrderState(StatesGroup):
    waiting_for_phone = State()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    discount_price = State()
    quantity = State()
    image = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"), KeyboardButton(text="üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
delivery_info_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
personal_account_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def admin_panel(order_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"status_{order_id}_processing")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", callback_data=f"status_{order_id}_confirmed")],
        [InlineKeyboardButton(text="üöö –í –ø—É—Ç–∏", callback_data=f"status_{order_id}_shipped")],
        [InlineKeyboardButton(text="üõë –û—Ç–º–µ–Ω–µ–Ω", callback_data=f"status_{order_id}_canceled")],
        [InlineKeyboardButton(text="üéâ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_{order_id}_completed")]
    ])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–µ—Ä—Ç—ã
offer_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer_sticker(os.getenv('STICKER_ID'))
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu)


# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command("add_product"))
async def add_product(message: types.Message, state: FSMContext):
    if message.from_user.id != int(os.getenv("ADMIN_ID")):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)

@dp.message(AddProduct.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.description)

@dp.message(AddProduct.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddProduct.price)

@dp.message(AddProduct.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–æ—á–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        await state.set_state(AddProduct.discount_price)
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(AddProduct.discount_price)
async def process_discount_price(message: types.Message, state: FSMContext):
    try:
        discount_price = float(message.text)
        data = await state.get_data()
        price = data["price"]

        if discount_price >= price:
            await message.answer("‚ùå –°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(discount_price=discount_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
        await state.set_state(AddProduct.quantity)
    except ValueError:
        await message.answer("‚ùå –°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(AddProduct.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 1:
            raise ValueError
        await state.update_data(quantity=quantity)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'):")
        await state.set_state(AddProduct.image)
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

@dp.message(AddProduct.image)
async def process_image(message: types.Message, state: FSMContext):
    image = message.text if message.text.lower() != '–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' else None
    data = await state.get_data()

    db.add_product(
        name=data["name"],
        description=data["description"],
        price=data["price"],
        discount_price=data["discount_price"],
        quantity=data["quantity"],
        image=image
    )

    discount_percent = round((1 - data["discount_price"] / data["price"]) * 100, 2)
    
    await message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
        f"üí∏ –°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {data['discount_price']}‚ÇΩ (-{discount_percent}%)"
    )
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
@dp.message(Command("delete_product"))
async def delete_product(message: types.Message, admin_id=None):
    if admin_id is None and message.from_user.id != int(os.getenv("ADMIN_ID")):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ ‚ùå")
        return

    products = db.get_product()
    
    if not products:
        await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üóë {name} - {price}‚ÇΩ", callback_data=f"delete_product_{product_id}")]
            for product_id, name, price, discount_price in products
        ]
    )


    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data.startswith("delete_product_"))
async def process_delete_product(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    try:
        product_id = int(callback.data.split("_")[2])
    except ValueError:
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞!", show_alert=True)
        return

    product = db.get_product_by_id(product_id)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    db.delete_product(product_id)
    await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{product[1]}¬ª —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await callback.message.delete()

    await delete_product(callback.message, admin_id=admin_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üõç –ö–∞—Ç–∞–ª–æ–≥"
@router.message(lambda message: message.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    products = db.get_product()

    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    for product in products:
        if len(product) == 4:  
            product_id, name, price, discount_price = product
        else:  
            product_id, name, price = product
            discount_price = price  

        if discount_price < price:
            discount_percent = round((1 - discount_price / price) * 100, 2)
            price_text = (
                f"üî• <b>–ê–ö–¶–ò–Ø!</b> üî•\n"
                f"üéØ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <s>{price}‚ÇΩ</s>\n"
                f"üí• –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{discount_price}‚ÇΩ</b>\n"
                f"üéâ –í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ <b>-{discount_percent}%</b>!"
            )
        else:
            price_text = f"üí∞ –¶–µ–Ω–∞: <b>{price}‚ÇΩ</b>"

        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"add_to_cart_{product_id}")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{product_id}")],
                [InlineKeyboardButton(text="‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{product_id}")]
            ]
        )

        await message.answer(
            f"{hbold(name)}\nüí∞ –¶–µ–Ω–∞: {price_text}", 
            reply_markup=buttons, 
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
@router.callback_query(lambda c: c.data.startswith("details_"))
async def product_details(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = db.get_product_details(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ image –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    if len(product) == 4:
        name, description, price, discount_price = product
        image = None
    else:
        name, description, price, discount_price, image = product

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ discount_price —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    try:
        discount_price = float(discount_price)
    except ValueError:
        discount_price = None  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ None

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ float
    price = float(price)

    text = f"üìå {hbold(name)}\n\nüìÑ {description}\n\n"

    if discount_price is not None and discount_price < price:
        discount_percent = round((1 - discount_price / price) * 100, 2)
        text += f"üî• <s>{price}‚ÇΩ</s> ‚ûù {discount_price}‚ÇΩ (-{discount_percent}%)\n"
    else:
        text += f"üí∞ {price}‚ÇΩ\n"

    if image and image.startswith("http"):
        await callback.message.answer_photo(photo=image, caption=text, parse_mode="HTML")
    else:
        await callback.message.answer(text, parse_mode="HTML")

    await callback.answer()


# –î–æ—é–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@router.callback_query(lambda c: c.data.startswith('add_favorite_'))
async def add_to_favorite_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split('_')[-1])
    
    db.add_to_favorites(user_id, product_id)

    await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚ù§Ô∏è")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[3])
    quantity = 1  

    
    if db.add_to_cart(user_id, product_id, quantity):
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)


# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message, update=False):
    user_id = message.from_user.id
    cart_items = db.show_cart(user_id)

    print(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {cart_items}") 

    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    
    text = "üõç *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    total_price = 0
    inline_kb = []

    for item in cart_items:
        try:
            product_id, name, discount_price, quantity = item
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã: {e}, item = {item}")
            continue
        
        total_price += discount_price  * quantity
        text += f"{name} - {discount_price }‚ÇΩ (x{quantity})\n"
        inline_kb.append([
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product_id}"),
            InlineKeyboardButton(text=f"{quantity}", callback_data="ignore"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"rremove_{product_id}")
        ])

    text += f"\nüí∞ *–ò—Ç–æ–≥–æ:* {total_price}‚ÇΩ"
    inline_kb.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])

    markup = InlineKeyboardMarkup(inline_keyboard=inline_kb)

    if update:
        await message.answer(text, parse_mode="Markdown", reply_markup=markup)
    else:
        await message.answer(text, parse_mode="Markdown", reply_markup=markup)


# –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query(lambda c: c.data.startswith("increase_"))
async def increase_quantity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])

    if db.increase_cart_item(user_id, product_id): 
        await callback.answer("‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ!")
    else:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ!", show_alert=True)

    cart_items = db.show_cart(user_id)
    if cart_items:
        await show_cart(callback.message, update=True)  
    else:
        await callback.message.delete() 


# –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query(lambda c: c.data.startswith("decrease_"))
async def decrease_quantity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])

    db.decrease_cart_item(user_id, product_id)

    cart_items = db.show_cart(user_id)
    if cart_items:
        await callback.answer("‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–º–µ–Ω—å—à–µ–Ω–æ!")
        await show_cart(callback.message, update=True) 
    else:
        await callback.message.delete()  
        await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(lambda c: c.data.startswith("rremove_"))
async def remove_item(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data_parts = callback.data.split("_")

    if len(data_parts) < 2 or not data_parts[1].isdigit():
        await callback.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        return

    product_id = int(data_parts[1])

    db.remove_from_cart(user_id, product_id)

    cart_items = db.show_cart(user_id)
    if cart_items:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")
        await show_cart(callback.message, update=True)
    else:
        await callback.message.delete()
        await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")


# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@dp.message(lambda message: message.text == "üî• –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def special_offers(message: types.Message):
    products = db.get_products_sorted_by_discount() 

    if not products:
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π.")
        return

    text = "üî• <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
    buttons = []

    for product in products:
        product_id, name, price, discount_price, image = product
        discount_percent = round((1 - discount_price / price) * 100, 2) if discount_price < price else 0

        text += f"üõçÔ∏è <b>{name}</b>\n"
        if discount_percent > 0:
            text += f"üí∞ <s>{price}‚ÇΩ</s> ‚Üí <b>{discount_price}‚ÇΩ</b> (-{discount_percent}%)\n\n"
        else:
            text += f"üí∞ {price}‚ÇΩ\n\n"

        buttons.append([
            InlineKeyboardButton(text=f"üîç {name}", callback_data=f"view_product_{product_id}"),
            InlineKeyboardButton(text="üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")
        ])

    if buttons:
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π.")


# –û—Ñ–µ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º
@dp.callback_query(lambda c: c.data == "checkout")
async def send_offer(callback: types.CallbackQuery):
    offer_text = (
        "‚öñÔ∏è –û—Ñ–µ—Ä—Ç–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚öñÔ∏è\n\n"
        "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.\n\n"
        "1. –ü—Ä–µ–¥–º–µ—Ç –æ—Ñ–µ—Ä—Ç—ã: –ú—ã –æ–±—è–∑—É–µ–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ —á–µ—Ä–µ–∑ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω.\n"
        "2. –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: –¶–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º. –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –Ω–æ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 3 –¥–Ω—è –¥–æ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
        "3. –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n"
        "4. –î–æ—Å—Ç–∞–≤–∫–∞: –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
        "5. –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞: –í —Å–ª—É—á–∞–µ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
        "6. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç–æ—Ä–æ–Ω: –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–æ–≤–∞—Ä—ã, –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –ø–æ –≤–∏–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º–∏ –∑–∞–∫–∞–∑–∞, –æ—Ñ–µ—Ä—Ç–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É, –∏ –∑–∞–∫–∞–∑ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º.\n\n"
        "üí° –í–∞–∂–Ω–æ: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –∑–∞–∫–∞–∑, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –Ω–∞—à–µ–π –æ—Ñ–µ—Ä—Ç—ã –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∏–º–∏.\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'. –î–ª—è –æ—Ç–º–µ–Ω—ã - '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'."
    )
    await callback.message.answer(offer_text, reply_markup=offer_keyboard)


# –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def request_phone(message: types.Message, state: FSMContext):
    cart_items = db.show_cart(message.from_user.id)  

    if not cart_items:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
        return

    cart_text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    cart_text += "\n".join([f"{item[1]} - {item[3]} —à—Ç. ({item[2] * item[3]}‚ÇΩ)" for item in cart_items])
    cart_text += f"\n\nüí∞ *–ò—Ç–æ–≥–æ:* {sum(item[2] * item[3] for item in cart_items)}‚ÇΩ"

    await message.answer(cart_text, parse_mode="Markdown")
    await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone_keyboard)
    await state.set_state(OrderState.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(lambda message: message.contact)
async def checkout(message: types.Message, state: FSMContext):

    user_id = message.from_user.id
    phone_number = message.contact.phone_number  
    cart_items = db.show_cart(user_id)  

    if not cart_items:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
        return

    total_price = sum(item[2] * item[3] for item in cart_items)
    
    order_id = db.create_order(user_id, phone_number, total_price, None)

    order_text = f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}* –æ—Ç {message.from_user.full_name} (ID: {user_id})\n"
    order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
    order_text += "\n".join([f"{item[1]} - {item[3]} —à—Ç." for item in cart_items])
    order_text += f"\nüí∞ *–ò—Ç–æ–≥–æ:* {total_price}‚ÇΩ\nüì¶ *–°—Ç–∞—Ç—É—Å:* üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"

    sent_message = await bot.send_message(GROUP_ID, order_text, parse_mode="Markdown", reply_markup=admin_panel(order_id))

    db.save_order_message_id(order_id, sent_message.message_id)

    for item in cart_items:
        db.update_stock(item[0], item[3])

    db.clear_cart(user_id)

    await message.answer('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.', reply_markup=main_menu)

    await state.clear()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query(lambda c: c.data.startswith("status_"))
async def change_order_status(callback: types.CallbackQuery):
    chat_admins = await bot.get_chat_administrators(GROUP_ID)
    admin_ids = [admin.user.id for admin in chat_admins]

    if callback.from_user.id not in admin_ids:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!", show_alert=True)
        return

    _, order_id, new_status = callback.data.split("_")
    order_id = int(order_id)

    db.update_order_status(order_id, new_status)

    user_id = db.get_user_by_order(order_id)
    message_id = db.get_order_message_id(order_id)

    if not message_id:
        await callback.answer("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø–µ!", show_alert=True)
        return

    status_map = {
    "processing": "üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
    "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
    "shipped": "üöö –í –ø—É—Ç–∏",
    "canceled": "üõë –û—Ç–º–µ–Ω–µ–Ω",
    "completed": "üéâ –ó–∞–≤–µ—Ä—à–µ–Ω"
    }

    new_status_text = status_map.get(new_status, "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    updated_text = callback.message.text.split("\nüì¶ *–°—Ç–∞—Ç—É—Å:*")[0] + f"\nüì¶ *–°—Ç–∞—Ç—É—Å:* {new_status_text}"
    await bot.edit_message_text(
    text=updated_text,
    chat_id=str(GROUP_ID), 
    message_id=message_id,
    parse_mode="Markdown",
    reply_markup=callback.message.reply_markup
)

    if user_id:
        await bot.send_message(user_id, f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {new_status_text}")

    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
@dp.message(Command("count_products"))
async def count_products(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id != int(os.getenv('ADMIN_ID')):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    products = db.get_all_products_with_stock()  

    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    inline_buttons = []
    for product in products:
        product_name, quantity = product  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        button = InlineKeyboardButton(text=f"{product_name} - {quantity} —à—Ç.", callback_data=f"product_{product_name}")
        inline_buttons.append([button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", reply_markup=keyboard)


# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message(lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message):
    await message.answer("üë§ –í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=personal_account_kb)


# –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(message: types.Message):
    user_id = message.from_user.id
    orders = db.get_orders_by_user(user_id)

    if not orders:
        await message.answer("üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
    
    moscow_timezone = pytz.timezone("Europe/Moscow")
    
    for order in orders:
        print(order) 

        order_id, date, total_price, status_code = order 
        
        status_dict = {
            "processing": "üì¶ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            "shipped": "üöö –í –ø—É—Ç–∏",
            "canceled": "üõë –û—Ç–º–µ–Ω–µ–Ω",
            "completed": "üéâ –ó–∞–≤–µ—Ä—à–µ–Ω",
            "failed": "‚ùå –ù–µ—É–¥–∞—á–∞",
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç"  
        }

        status = status_dict.get(status_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å") 
        print(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å: {status_code}")
        order_date = date

        order_date_obj = datetime.strptime(order_date, "%Y-%m-%d %H:%M:%S")
        
        order_date_obj = pytz.utc.localize(order_date_obj)  
        order_date_obj = order_date_obj.astimezone(moscow_timezone)
        
        formatted_date = order_date_obj.strftime("%d.%m.%Y %H:%M")
        text += f"üÜî *–ó–∞–∫–∞–∑ #{order_id}*\nüìÖ –î–∞—Ç–∞: {formatted_date}\nüí∞ –°—É–º–º–∞: {total_price}‚ÇΩ\nüì¶ –°—Ç–∞—Ç—É—Å: *{status}*\n\n"

    await message.answer(text, parse_mode="Markdown")


# –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.message(lambda message: message.text == "‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def view_favorites(message: types.Message):
    user_id = message.from_user.id
    favorites = db.get_favorites_by_user(user_id)

    if not favorites:
        await message.answer("–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.")
        return

    text = "‚ù§Ô∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    buttons = []

    for fav in favorites:
        product_id = fav[0]
        product_info = db.get_product_info_by_id(product_id)

        if not product_info:
            continue

        name = product_info["name"]
        price = float(product_info["price"])
        discount_price = float(product_info.get("discount_price", price))

        if discount_price < price:
            discount_percent = round((1 - discount_price / price) * 100, 2)
            text += f"üõçÔ∏è <b>{name}</b>\nüî• <s>{price}‚ÇΩ</s> ‚Üí <b>{discount_price}‚ÇΩ</b> (-{discount_percent}%)\n\n"
        else:
            text += f"üõçÔ∏è <b>{name}</b> - {price}‚ÇΩ\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        callback_data = f"remove_favorite_{product_id}"
        print(f"DEBUG: —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å callback_data: {callback_data}")
        buttons.append([
            InlineKeyboardButton(text=f"üîç {name}", callback_data=f"view_product_{product_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=callback_data)
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
@dp.callback_query(lambda c: c.data.startswith("view_product_"))
async def view_product_from_favorites(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2]) 
    product = db.get_product_details(product_id)

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    name, description, price, discount_price, image = product

    text = f"üìå <b>{name}</b>\n\nüìÑ {description}\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ"
    if discount_price < price:
        discount_percent = round((1 - discount_price / price) * 100, 2)
        text += f"\nüî• <s>{price}‚ÇΩ</s> ‚Üí <b>{discount_price}‚ÇΩ</b> (-{discount_percent}%)"

    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"add_to_cart_{product_id}")]
        ]
    )

    if image and image.startswith("http"):
        await callback.message.answer_photo(photo=image, caption=text, parse_mode="HTML", reply_markup=buttons)
    else:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=buttons)

    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query(lambda c: c.data.startswith("remove_favorite_"))
async def remove_favorite(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    product_id = int(parts[2])
    db.remove_favorite(user_id, product_id)

    await callback.answer("‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", show_alert=True)
    await callback.message.delete()


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ"
@dp.message(lambda message: message.text == "üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ")
async def delivery_info(message: types.Message):
    delivery_details = (
        "üöö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:*\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        "1. üöö *–î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –°–î–≠–ö*: –¢–æ–≤–∞—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –°–î–≠–ö–æ–º, —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ –ú–æ—Å–∫–≤–µ) ‚Äî –æ—Ç 1 –¥–æ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n"
        "2. üìç *–°–∞–º–æ–≤—ã–≤–æ–∑*: –ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, —É–∫–∞–∑–∞–≤ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.\n\n"
        "*–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*: –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –Ω–∞—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )

    await message.answer(delivery_details, parse_mode="Markdown", reply_markup=delivery_info_kb)\


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer("üìû +7 977 412 60 27\nüìß Email: example@mail.com")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())